# 单独包含伺服硬件定义以允许自动升级
[include blobifier_hw.cfg]

##########################################################################################

# 与 Blobifier 净化托盘、桶和喷嘴结合使用的示例配置
# 洗涤器模组。由 Dendrowen（Discord 上的 dendrowen）创建。该宏基于
# 版本，Nozzle Scrubber 由 Hernsl 制作（Discord 上的 Hernsl#8860）。该设备是
# 围绕 Voron V2.4 300mm 设计，但也适用于 250mm 和 350mm。这
# 版本仅支持安装在床的左后侧。如果你决定改变
# 请考虑通过创建拉取请求来为该项目做出贡献
# 需要的改变。

# 重要提示：此模组无法使用床的左后部分，因为
#            工具头需要降低到0。确保不要使用左后130x35mm。

# 这种设备组合的目标是在一个过程中处理清除的灯丝 
# 多色打印，无需清除块，也无需混乱
# 细丝粪便耗尽了您的整个 3D 打印机房间。 Blobifier 通过以下方式实现这一点
# 清洗到可伸缩托盘上，导致灯丝变成一个小斑点 
# 而不是一个大螺旋。这使得浪费相对较少。水桶应该是
# 能够进行多达 200 次灯丝交换（对于 300mm V2）。

# 建议使用Happy Hare的start_gcode。那么你就能够完全
# 并有效地使用这个模组。检查 Happy Hare 文档 gcode_preprocessing.md
# 在 Happy Hare github 中了解更多详细信息。

###################################### DISCLAIMER ########################################

# 您，并且只有您，有责任正确执行这些宏，并且
# g代码。您的机器可能发生的任何损坏均由您负责。
# 尤其是在前几次执行此宏时，请留意您的
# 打印机和
# 紧急停止。

##########################################################################################

##########################################################################################
# 主宏。通常你只需要调用这个或者将它放在 Happy Hare 中
# 使用variable_user_post_load_extension的_MMU_POST_LOAD宏:
#
# variable_user_post_load_extension : `BLOBIFIER`
#
# 参数说明:
# PURGE_LENGTH=[float] （可选）要清除的长度。如果省略（默认），它将检查
#                       purge_volumes 矩阵或variable_purge_length。这个可以用
#                       覆盖并进行测试。
#
[gcode_macro BLOBIFIER]
# 这些参数定义您的灯丝净化。撤回变量用于撤回
# 清洗后立即进行，以防止不必要的渗漏。有些丝材特别渗水
# 并且在缩回后可能会继续从喷嘴中渗出一两秒。更新
# 有必要的。
variable_purge_spd:            400       # 吹扫速度，以毫米/分钟为单位。
variable_purge_temp_min:       200       # 最低喷嘴吹扫温度。

# 调整此项，使喷嘴在刷子内擦洗。注意不要太低！
# 从一个高值（比如 6）开始，然后继续
# 从那里下来。
variable_brush_top:             6 

# 这些参数定义了您的擦洗、行进速度、安全 z 间隙以及多少
# 次你想擦拭。根据需要进行更新。
variable_clearance_z:           2          # 旅行时但不打扫卫生时，
                                           #   喷嘴之间沿 z 轴的间隙
                                           #   和刷子。
variable_wipe_qty:              2          # 完成次数（一次完整擦拭：左、
                                           #   右、左或右、左、右）擦拭巾。
variable_travel_spd_xy:     10000          # 沿 x 和 的行进（非清洁）速度
                                           #   y 轴，单位为毫米/分钟。
variable_travel_spd_z:       1000          # 沿 z 轴的行进（非清洁）速度
                                           #   以毫米/分钟为单位
variable_wipe_spd_xy:       10000          # 喷嘴擦拭速度（毫米/分钟）


# 这些参数定义画笔的大小。根据需要进行更新。视觉参考
# 下面提供了。
# 
#                  ←   画笔宽度   →                            
#                   _________________                                                          
#                  |                 |  ↑                Y 位置是从您获取的
#  刷子开始 (x) |                     | 画笔深度       stepper_y 位置_最大。调整
#                  |_________________|  ↓                你的刷子在Y上所以
#                          (y)                           喷嘴在内部擦洗
#                      刷子前面                       刷子。                                              
# __________________________________________________________
#                     打印机正面
# 
# 
# 画笔的起始位置。下面提供了 250、300 和 350mm 的默认值。
# 根据需要取消注释
#variable_brush_start:          34  # 适用于 250mm 结构
variable_brush_start:           67  # 适用于 300mm 结构
#variable_brush_start:          84  # 适用于 350mm 结构

# 刷子的宽度
variable_brush_width:          35	

# 清除位置。托盘长度为 15 毫米，因此如果您将其组装在
# 床的一侧（默认），10mm是一个很好的位置
variable_purge_x: 10

# 托盘的高度。如果它在你的床下面，给它一个负数，等于
# 不同之处。如果它在你的床上方，请给它一个正数。你可以找到这个号码
# 通过归位、可选 QGL 或同等工具，并将工具头移至托盘上方，以及
# 用纸的方法降低它。
variable_tray_top: 0.7

# 托盘位置的伺服角度
variable_tray_angle_out: 0
variable_tray_angle_in: 180

# ========================================================================================
# ==================== 斑点调整 =======================================================
# ========================================================================================

# 以下部分定义如何执行清除序列。这就是你的地方
# 调整清除以创建漂亮的斑点。请参阅视觉参考以获得更好的效果
# 理解。视觉对象填充有示例值。以下是一些指南
# 提供帮助调整。
#
#                          \_____________/
#                             |___|___|
#                                \_/            ______________  < 第三次迭代结束。
#                                / \                                  高度：3 x iteration_z_raise -(2 + 1) x iteration_z_change (3 x 5 -2 x 1.2 = 11.4)
#                               |   |                                 挤压：3 x max_iteration_length (3 x 50 = 150)
#                              /     \          ______________  < 第二次迭代结束。
#                             |       \                               高度：2 x iteration_z_raise -1 x iteration_z_change (2 x 5 -1 x 1.2 = 8.8)
#                            /         |                              挤压：2 x max_iteration_length (2 x 50 = 100)
#                           |           \       ______________  < 第一次迭代结束。
#                          /             \                            高度：1 x iteration_z_raise (1 x 5 = 5)
#                         |               |                           挤压：1 x max_iteration_length (1 x 50 = 50)
#___________               \             /      ______________  < 喷嘴的起始高度。默认值：1.5mm
#           |_______________\___________/_      ______________  < 托盘底部
#           |_____________________________|
#           |
# 
########################### 斑点调整##############################
# +-------------------------------------+----------------------------+
# |               灯丝粘在喷嘴上         | 增量。净化开始               |
# |    初始吹扫（前几毫米）               |                            |
# +-------------------------------------+----------------------------+
# |  细丝从下面滑出                      | 增量。温度                  |
# |  第一次迭代时的喷嘴                   | 十二月迭代z_raise           |
# |                                     | 增量。最大迭代长度           |
# +-------------------------------------+----------------------------+
# |  细丝从下面滑出                      | 十二月清除_spd               |
# |  后续迭代中的喷嘴                    | 增量。迭代_z_变化            |
# +-------------------------------------+----------------------------+
# |  灯丝粘在喷嘴上                      | 十二月迭代_z_变化            |
# |         后来的迭代                   |                            |
# +-------------------------------------+----------------------------+
# |        我想我的斑点可以               | 巴尔西...增加               |
# |          变得更大！                  | 每个blob的最大迭代次数        |
# +-------------------------------------+----------------------------+
#

# 吹扫前喷嘴高于托盘的高度。这允许任何建立
# 清除前的逃脱压力。
variable_purge_start: 0.2

# 一次迭代挤出的最大长丝（长度）毫米。一个blob包含多个
# 迭代次数
variable_max_iteration_length: 50

# 每次迭代提高 Z 的量
variable_iteration_z_raise: 5

# 随着喷嘴变高且斑点变宽，Z 升程需要减小。
variable_iteration_z_change: 0.8

# 每个 blob 的最大迭代次数。 3 对于大多数冲水来说应该足够了。如果没有，则 Blobifier
# 将为一次清除创建多个 blob。
variable_max_iterations_per_blob: 3

# 在托盘上产生水滴释放压力后，稍微抬起喷嘴。
variable_eject_hop: 1.0

# 吹扫后和清洁以释放喷嘴压力前的停留时间（毫秒）。
variable_pressure_release_time: 1000

# 设置零件冷却风扇速度。禁用有助于防止喷嘴冷却
# 并刺激流动，启用它可以防止斑点粘在一起。数值范围
# 从 0 .. 1 开始，如果您不想更改，则为 -1。
#variable_part_cooling_fan: -1              # 保持不变
#variable_part_cooling_fan:  0              # 禁用风扇
variable_part_cooling_fan:  1               # 全速运行它


# ========================================================================================
# ==================== 吹扫长度调整 ===============================================
# ========================================================================================

# 当工具映射 purge_volumes 或
# 参数 PURGE_LENGTH 已设置。
variable_purge_length: 150

# 绝对最少的清除量，即使您不更换工具。这是为了
# 打印前的喷嘴
variable_purge_length_minimum: 30

# 切片器值通常有点太浪费了。在此进行调整以获得最佳值。 0.6
# 是一个很好的起点。
variable_purge_length_modifier: 0.5

# 净化体积计算后添加的固定灯丝长度。快乐的兔子已经
# 根据已知的残留灯丝共享要清除的额外灯丝量的信息，
# 尖端切割碎片和初始回缩设置。然而这个设置可以添加一个固定的
# 如有必要，请在上面添加金额，但建议从 0 开始并进行调整
# 首先切片器清除矩阵.
# 你什么时候应该改变这个值:
#      增加：当从暗到亮的交换很好，但从亮到暗的交换则不然。
#      减少：当亮到暗的交换很好，但暗到亮的交换不好时。不 
#      忘记增加 purge_length_modifier
variable_purge_length_addition: 0

# ========================================================================================
# ==================== 桶  ============================================================
# ========================================================================================

# 桶中容纳的最大 blob 数。如果超过此值则暂停打印
# 数字。
variable_max_blobs: 400
# 启用桶振动器。您需要安装 shaker.stl
variable_enable_shaker: 1
# 一次摇晃的来回动作次数
variable_bucket_shakes: 10
# 在摇晃过程中加速度通常可以更高，因为您不需要保留打印
# 牢记质量。较高的加速度有助于更好地分散斑点。
variable_shake_accel: 10000

# 摇动水桶的频率。范围从 0 到 1 的十进制值，其中 0
# 表示从不，1 表示每次。这样，随着桶的转动，晃动会更频繁地发生。
# 填上。敏感值范围为 0.75 至 0.95
variable_bucket_shake_frequency: 0.95

gcode:

  # ======================================================================================
  # ==================== 记录状态（包括风扇、速度等...） =======================
  # ======================================================================================

  # 一般状态
  SAVE_GCODE_STATE NAME=BLOBIFIER_state


  # ======================================================================================
  # ==================== 检查归位状态 =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="BLOBIFIER: Not homed! Home xyz before blobbing"
  {% elif printer.quad_gantry_level and printer.quad_gantry_level.applied == False %}
    RESPOND MSG="BLOBIFIER: QGL not applied! run quad_gantry_level before blobbing"
  {% else %}
    
    # 部分冷却风扇
    {% if part_cooling_fan >= 0 %}
      # 保存部分冷却风扇速度以便稍后再次启用
      {% set backup_fan_speed = printer.fan.speed %}
      # 设置部分冷却风扇速度
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # 将进给率设置为 100% 以实现正确的清洗速度
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

    # ======================================================================================
    # ==================== 定义基本变量==========================================
    # ======================================================================================
    
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    {% set bl_count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set restore_z = [printer['gcode_macro BLOBIFIER_PARK'].restore_z,pos.z]|max %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    {% set position_y = pos_max.y %}

    # 从切片器获取清除量（如果设置正确。请参阅
    # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
    
    # ======================================================================================
    # ==================== 确定吹扫长度==========================================
    # ======================================================================================

    {% if params.PURGE_LENGTH %} # =============== 参数 吹扫长度 ======================
      {action_respond_info("BLOBIFIER: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== 工具没有改变 =============
      {action_respond_info("BLOBIFIER: Tool didn't change (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}

    {% elif pv %} # ============== 从 HAPPY HARE 获取（可能从 SLICER 获取） ==============
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("BLOBIFIER: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("BLOBIFIER: tool(s) unknown. Finding largest value")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("BLOBIFIER: Swapped T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section %}

      {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + printer.mmu.extruder_residual_filament + printer.mmu.toolchange_retract + purge_length_addition %}

    {% else %} # ========================= 使用配置变量 =============================
      {action_respond_info("BLOBIFIER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float + printer.mmu.extruder_filament_remaining + printer.mmu.extruder_residual_filament + printer.mmu.toolchange_retract %}
    {% endif %}

    # ==================================== 应用最少吹扫 =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max %}
    {action_respond_info("BLOBIFIER: Purging %.2fmm of filament" % (purge_len|float))}

    # ======================================================================================
    # ==================== 吹扫顺序 ================================================
    # ======================================================================================

    # 设置为绝对定位。
    G90

    # 检查吹扫长度，必要时进行吹扫。
    {% if purge_len|float > 0 %}

      # ====================================================================================
      # ==================== 定位 ===================================================
      # ====================================================================================
      
      # 移动到组件，首先向右移动一点（brush_start）以避免
      # 潜在的 filametrix 引脚（如果它尚未位于同一 Y 坐标上）。
      {% if printer.toolhead.position.y != position_y %}
        G1 X{brush_start} Y{position_y} F{travel_spd_xy}
      {% endif %}
      # 移到托盘上
      G1 X{purge_x} F{travel_spd_xy}

      # ====================================================================================
      # ==================== 桶摇动 ==================================================
      # ====================================================================================
      
      {% if enable_shaker %}
        {% if (bl_count.current_blobs + 1) >= bl_count.next_shake %}
          BLOBIFIER_SHAKE_BUCKET SHAKES={bucket_shakes}
          _BLOBIFIER_CALCULATE_NEXT_SHAKE
        {% endif %}
      {% endif %}
      
      # ====================================================================================
      # ==================== 在托盘上定位===========================================
      # ====================================================================================
      G1 Z{tray_top + purge_start} F{travel_spd_z}

      # 扩展 blobifier
      BLOBIFIER_SERVO POS=out
      # 检查舵机位置是否正确
      {% if printer.mmu is defined and printer.mmu.enabled %}
        {% if printer.configfile.config.mmu.sync_to_extruder %}
          MMU_SYNC_GEAR_MOTOR SYNC=1
        {% else %}
          MMU_SERVO POS=up
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== 加热热端 ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== 开始迭代 ===============================================
      # ====================================================================================
      
      # 根据清除长度和 max_iteration 计算迭代总数
      # 长度。
      {% set iterations = (purge_len / max_iteration_length)|round(0, 'ceil')|int %}

      # 重复该过程，直到达到purge_len
      {% for n in range(iterations) %}
      
        # 计算当前 blob 中的当前迭代
        {% set step = n % max_iterations_per_blob %}

        {% if step == 0 %}
          G1 Z{tray_top + purge_start} F{travel_spd_z}
        {% endif %}

        # 确定挤出量。剩余的 purge_len 或
        # 最大迭代长度。
        {% set purge_amount_left = purge_len - (max_iteration_length * n) %}
        {% set extrude_amount = [purge_amount_left,max_iteration_length]|min %}
        {% set extrude_ratio = extrude_amount / max_iteration_length %}

        # 相对定位
        G91 
        M83

        # 计算z必须增加的量
        # 如果步长等于0，则喷嘴的起始位置已经稍高一些。
        {% set step_triangular = step * (step + 1) / 2 %}
        {% set z_raise_substract = purge_start if step == 0 else 
          step_triangular * iteration_z_change %}
        {% set raise_z = (iteration_z_raise - z_raise_substract) * extrude_ratio %}

        # 确保 raise_z 永远不会变为负值，从而在清洗时掉落喷嘴。
        {% set raise_z = [raise_z,0]|max %}

        # 根据吹扫速度计算上升速度。
        {% set duration = extrude_amount / purge_spd %} 
        {% set speed = raise_z / duration %}
      
        # 清除一次迭代
        G1 Z{raise_z} E{extrude_amount} F{speed}

        # ==================================================================================
        # ==================== 存款块 ================================================
        # ==================================================================================
        {% set max_iterations_reached = step == max_iterations_per_blob - 1 %}
        {% set purge_length_reached = purge_len - max_iteration_length * (n+1) <= 0 %}
        {% if max_iterations_reached or purge_length_reached %}
          # 稍微提高 z 来减轻斑点的压力，防止它横向移动
          G1 Z{eject_hop} F{travel_spd_z}
          # 收回托盘
          BLOBIFIER_SERVO POS=in
          # 将工具头向下移动到 purge_start 高度，将斑点降低到托盘下方
          G90 # 绝对定位
          G1 Z{tray_top} F{travel_spd_z}
          # 延长托盘以“切断”斑点并为下一个斑点做好准备
          BLOBIFIER_SERVO POS=out
          BLOBIFIER_SERVO POS=in
          BLOBIFIER_SERVO POS=out
          # 跟踪 blob 的数量
          _BLOBIFIER_COUNT
        {% endif %}
      {% endfor %}
    {% endif %}
    G1 Z{tray_top + 1} F{travel_spd_z}
    G4 P{pressure_release_time}
    BLOBIFIER_CLEAN

    # ======================================================================================
    # ==================== 恢复状态 ===================================================
    # ======================================================================================

    G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # 重置部分冷却风扇（如果已更改）
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=BLOBIFIER_state 

  # 最终收回以符合 Happy Hare 的预期
  G1 E-{printer.mmu.toolchange_retract} F{printer.configfile.settings.mmu.toolchange_retract_speed * 60}

##########################################################################################
# 用黄铜刷擦拭喷嘴
#
[gcode_macro BLOBIFIER_CLEAN]
gcode:
  {% set bb = printer['gcode_macro BLOBIFIER'] %}
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  # 擦拭位置。刷子的左侧或右侧基于bucket_pos 来避免
  # 不必要的旅行.
  
  SAVE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state

  G90

  G1 Z{bb.brush_top + bb.clearance_z} F{bb.travel_spd_z}
  G1 X{bb.brush_start} F{bb.travel_spd_xy}
  G1 Y{position_y}

  # 将喷嘴向下移动到刷子中。
  G1 Z{bb.brush_top} F{bb.travel_spd_z}
   
  # 执行擦除。基于bucket_pos 的擦除方向，用于酷炫的随机擦洗例程。
  {% for wipes in range(1, (bb.wipe_qty + 1)) %}
     G1 X{bb.brush_start + bb.brush_width} F{bb.wipe_spd_xy}
     G1 X{bb.brush_start} F{bb.wipe_spd_xy}
  {% endfor %}

  RESTORE_GCODE_STATE NAME=BLOBIFIER_CLEAN_state



##########################################################################################
# 将喷嘴停放在托盘上，以防止在更换耗材时渗漏。放置这个
# mmu_macro_vars.cfg 中预卸载扩展中的扩展：
#   variable_user_pre_unload_extension：“BLOBIFIER_PARK”
#
[gcode_macro BLOBIFIER_PARK]
variable_restore_z: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set pos_max = printer.toolhead.axis_maximum %}
  {% set position_y = pos_max.y %}

  SET_GCODE_VARIABLE MACRO=BLOBIFIER_PARK VARIABLE=restore_z VALUE={pos.z}

  SAVE_GCODE_STATE NAME=blobifier_park_state
  
   {% if "xyz" in printer.toolhead.homed_axes and printer.quad_gantry_level and printer.quad_gantry_level.applied %}
    G90

    G1 X{bl.brush_start} Y{position_y} F{bl.travel_spd_xy}
    G1 X{bl.purge_x}
    G1 Z{bl.tray_top} F{bl.travel_spd_z}
  {% else %}
    RESPOND MSG="Please home (and QGL) before parking"
  {% endif %}

  RESTORE_GCODE_STATE NAME=blobifier_park_state

##########################################################################################
# 缩回或伸出托盘
# POS=[in|out] 收缩器伸出托盘
#
[gcode_macro BLOBIFIER_SERVO]
# 如果伺服系统没有足够的时间完全缩回或伸出，请增加此值
variable_dwell_time: 200
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set pos = params.POS %}
  {% if pos == "in" %}
    SET_SERVO SERVO=blobifier ANGLE={bl.tray_angle_in}
    G4 P{dwell_time}
  {% elif pos == "out" %}
    SET_SERVO SERVO=blobifier ANGLE={bl.tray_angle_out}
    G4 P{dwell_time}
  {% else %}
    {action_respond_info("BLOBIFIER: provide POS=[in|out]")}
  {% endif %}
  SET_SERVO SERVO=blobifier WIDTH=0

##########################################################################################
# 将 blob 计数增加 1 并检查存储桶是否已满。暂停
# 打印机（如果有）。
#
[gcode_macro _BLOBIFIER_COUNT]
# 不要改变这些变量
variable_current_blobs: 0
variable_last_shake: 0
variable_next_shake: 0
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% if current_blobs >= bl.max_blobs %}
    {action_respond_info("BLOBIFIER: Empty purge bucket!")}
    M117 Empty purge bucket!
    PAUSE
  {% else %}
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE={current_blobs + 1}
    _BLOBIFIER_SAVE_STATE
    {action_respond_info(
      "BLOBIFIER: Blobs in bucket: %s/%s. Next shake @ %s" 
      % (current_blobs + 1, bl.max_blobs, next_shake)
    )}
  {% endif %}

##########################################################################################
# 将 blob 计数重置为 0
#
[gcode_macro _BLOBIFIER_COUNT_RESET]
gcode:
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE=0
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=last_shake VALUE=0
  _BLOBIFIER_SAVE_STATE
  
  _BLOBIFIER_CALCULATE_NEXT_SHAKE

##########################################################################################
# 摇动斑点桶以分散斑点
#
[gcode_macro BLOBIFIER_SHAKE_BUCKET]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% set original_accel = printer.toolhead.max_accel %}
  {% set original_minimum_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    {action_raise_error("BLOBIFIER: Not homed. Home xyz first")}
  {% endif %}
  
  SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=last_shake VALUE={count.current_blobs}
  _BLOBIFIER_SAVE_STATE
  SAVE_GCODE_STATE NAME=shake_bucket
  
  M400
  M117 (^_^)

  G90
  {% set shakes = params.SHAKES|default(10)|int %}
  {% set position_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  
  # 如果 y 尚未存在，则移动到保存位置
  {% if printer.toolhead.position.y != position_y %}
    G1 X{bl.brush_start} Y{position_y} F{bl.travel_spd_xy}
  {% endif %}

  # 向上移动一点以防止底座渗水
  G1 Z2 F{bl.travel_spd_z}
  #滑入插槽
  G1 X0 F{bl.travel_spd_xy}

  M400
  M117 (+(+_+)+)

  SET_VELOCITY_LIMIT ACCEL={bl.shake_accel} MINIMUM_CRUISE_RATIO=0.1
  
  # 摇走吧！
  {% for shake in range(1, shakes) %}
     G1 Y{position_y - 4}
     G1 Y{position_y}
  {% endfor %}

  SET_VELOCITY_LIMIT ACCEL={original_accel} MINIMUM_CRUISE_RATIO={original_minimum_cruise_ratio}
  # 移出槽
  G1 X{bl.purge_x}

  M400
  M117 (X_x)

  RESTORE_GCODE_STATE NAME=shake_bucket  

##########################################################################################
# 计算何时应该摇动桶。
#
[gcode_macro _BLOBIFIER_CALCULATE_NEXT_SHAKE]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}

  {% set remaining_blobs = bl.max_blobs - count.last_shake %}
  {% set next_shake = (1 - bl.bucket_shake_frequency) * remaining_blobs + count.last_shake %}
  _BLOBIFIER_SAVE_STATE
  _BLOBIFIER_SET_NEXT_SHAKE VALUE={next_shake|int}

##########################################################################################
# 设置下次摇动桶的时间
# VALUE=[int] 应摇动多少斑点
#
[gcode_macro _BLOBIFIER_SET_NEXT_SHAKE]
gcode:
  {% if params.VALUE %}
    {% set next_shake = params.VALUE %}
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=next_shake VALUE={next_shake}
    _BLOBIFIER_SAVE_STATE
  {% else %}
    {action_respond_info("BLOBIFIER: Provide parameter VALUE=")}
  {% endif %}

##########################################################################################
# 一些健全性检查
#
[delayed_gcode BLOBIFIER_INIT]
initial_duration: 5.0
gcode:
  _BLOBIFIER_INIT
  BLOBIFIER_SERVO POS=out

[gcode_macro _BLOBIFIER_INIT]
gcode:
  {% set bl = printer['gcode_macro BLOBIFIER'] %}
  {% set raise_z_min = (bl.iteration_z_raise - ((bl.max_iterations_per_blob - 1) * (bl.max_iterations_per_blob) / 2) * bl.iteration_z_change) %}
  
  # 清除时没有下降
  {% if raise_z_min < 0 %} 
    {action_emergency_stop("BLOBIFIER: Your current blob settings cause the nozzle to drop on the final iteration(s). increase iteration_z_raise or decrease either iteration_z_change or max_iterations_per_blob.")}
  {% endif %}

  # 有效部分冷却风扇设置
  {% if bl.part_cooling_fan != -1 and (bl.part_cooling_fan < 0 or bl.part_cooling_fan > 1) %}
    {action_emergency_stop("BLOBIFIER: Value %f is invalid for variable part_cooling_fan. Either -1 or a value from 0 .. 1 is valid." % (bl.part_cooling_fan))}
  {% endif %}

  # 有效的桶抖动频率
  {% if bl.bucket_shake_frequency < 0 or bl.bucket_shake_frequency > 1 %}
    {action_emergency_stop("BLOBIFIER: Value %f is invalid for variable bucket_shake_frequency. Change it to a value between 0 .. 1" % (bl.bucket_shake_frequency))}
  {% endif %}  

  {% if printer.mmu %}
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].restore_xy_pos != 'next' %}
      {action_respond_info("BLOBIFIER: If not using a wipe tower, consider setting restore_xy_pos: 'next' in mmu_macro_vars.cfg")}
    {% endif %}

    # Blobifier 公园已启用
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].user_pre_unload_extension == "BLOBIFIER_PARK" %}

      # MMU 停放已启用
      {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].enable_park %}
        {action_respond_info("BLOBIFIER: MMU park is enabled in mmu_macro_vars.cfg. This could interfere with BLOBIFIER_PARK")}
        
        # 启用表单提示后 MMU 停放
        {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].park_after_form_tip %}
          {action_respond_info("BLOBIFIER: MMU park_after_form_tip in mmu_macro_vars.cfg is enabled and could interfere with BLOBIFIER_PARK")}
        {% endif %}
      {% endif %}

      #Filmetrix 安装了吗？
      {% if printer.configfile.config.mmu.form_tip_macro == '_MMU_CUT_TIP' %}

        # 禁用 CUT 后恢复位置
        {% if not printer['gcode_macro _MMU_CUT_TIP_VARS'].restore_position %}
          {action_respond_info("BLOBIFIER: _MMU_CUT_TIP restore_position in mmu_macro_vars.cfg is disabled, this disables BLOBIFIER_PARK's use")}
        {% endif %}
    
        # Tray_top 太低
        {% if bl.tray_top < 0.2 %}
          {action_emergency_stop("BLOBIFIER: Both BLOBIFIER_PARK and _MMU_CUT_TIP are enabled, but the tray_top is too low (< 0.2). This will cause the nozzle to run into the bed during cutting")}
        {% endif %}
    
      {% endif %}
    
    # Blobifier 已启用，但 Blobifier_park 未启用
    {% elif printer['gcode_macro _MMU_SEQUENCE_VARS'].user_post_load_extension == 'BLOBIFIER' %}
      {action_respond_info("BLOBIFIER: Consider setting user_pre_unload_extension in mmu_macro_vars.cfg to BLOBIFIER_PARK")}
    {% endif %}
  {% endif %}


[delayed_gcode BLOBIFIER_LOAD_STATE]
initial_duration: 2.0 # 给它一些时间来启动
gcode:
  {% set sv = printer.save_variables.variables.blobifier %}

  {% if sv %}
    # 恢复状态
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=last_shake VALUE={sv.last_shake}
    SET_GCODE_VARIABLE MACRO=_BLOBIFIER_COUNT VARIABLE=current_blobs VALUE={sv.current_blobs}
  {% endif %}
  _BLOBIFIER_CALCULATE_NEXT_SHAKE

[gcode_macro _BLOBIFIER_SAVE_STATE]
gcode:
  {% set count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
  {% set sv = {'current_blobs': count.current_blobs, 'last_shake': count.last_shake} %}
  SAVE_VARIABLE VARIABLE=blobifier VALUE="{sv}"

