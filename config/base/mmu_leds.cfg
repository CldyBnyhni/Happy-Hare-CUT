########################################################################################################################
# Happy Hare 支持 LED 控制宏
# 支持控制从 Happy Hare 状态更改事件调用的可选 LED
#
# 该文件是只读的
#

[gcode_macro _MMU_LED_ACTION_CHANGED]
description: Called when an action has changed to update LEDs
gcode:
    {% set action = params.ACTION|string %}
    {% set old_action = params.OLD_ACTION|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if action == "Loading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_white_slow_exit STATUS_EFFECT=mmu_white_slow_status
    {% elif action == "Unloading" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_white_slow_exit STATUS_EFFECT=mmu_white_slow_status
    {% elif action == "Heating" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_breathing_red_exit STATUS_EFFECT=mmu_breathing_red_status
    {% elif action == "Idle" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=default
    {% elif action == "Homing" or action == "Selecting" %}
        {% if old_action != "Homing" and old_action != "Checking" %}
            _MMU_SET_LED EXIT_EFFECT=mmu_white_fast_exit STATUS_EFFECT=off FADETIME=0
        {% endif %}
    {% elif action == "Checking" %}
        _MMU_SET_LED EXIT_EFFECT=default STATUS_EFFECT=mmu_white_fast_status
    {% endif %}


[gcode_macro _MMU_LED_PRINT_STATE_CHANGED]
description: Called when print state changes to update LEDs
gcode:
    {% set state = params.STATE|string %}
    {% set old_state = params.OLD_STATE|string %}
    {% set gate = printer['mmu']['gate'] %}

    {% if state == "initialized" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_curtain_exit DURATION=3
    {% elif state == "printing" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif state == "pause_locked" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif state == "paused" %}
        _MMU_SET_LED GATE={gate} EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=mmu_strobe_status
    {% elif state == "ready" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif state == "complete" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_sparkle_exit STATUS_EFFECT=default DURATION=20
    {% elif state == "error" %}
        _MMU_SET_LED EXIT_EFFECT=mmu_strobe_exit STATUS_EFFECT=default DURATION=20
    {% elif state == "cancelled" %}
        _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default
    {% elif state == "standby" %}
        _MMU_SET_LED EXIT_EFFECT=off ENTRY_EFFECT=off STATUS_EFFECT=off
    {% endif %}


[gcode_macro _MMU_LED_GATE_MAP_CHANGED]
description: Called when gate map is updated to update LEDs
gcode:
    {% set gate = params.GATE|int %}
    {% set led_vars = printer['gcode_macro _MMU_SET_LED'] %}

    {% set current_exit_effect = led_vars['current_exit_effect'] %}
    {% if current_exit_effect in ["gate_status", "filament_color", "slicer_color"] %}
        {% set exit_effect=current_exit_effect %}
    {% else %}
        {% set exit_effect = "" %}
    {% endif %}

    {% set current_entry_effect = led_vars['current_entry_effect'] %}
    {% if current_entry_effect in ["gate_status", "filament_color", "slicer_color"] %}
        {% set entry_effect=current_entry_effect %}
    {% else %}
        {% set entry_effect = "" %}
    {% endif %}

    {% set current_status_effect = led_vars['current_status_effect'] %}
    {% if current_status_effect in ["filament_color", "slicer_color"] %}
        {% set status_effect=current_status_effect %}
    {% else %}
        {% set status_effect = "" %}
    {% endif %}

    {% if exit_effect != "" or entry_effect != "" or status_effect != "" %}
        _MMU_SET_LED EXIT_EFFECT={exit_effect} ENTRY_EFFECT={entry_effect} STATUS_EFFECT={status_effect}
    {% endif %}


###########################################################################
# MMU neopixel LED 支持宏
#
# 不提供动作状态时 LED 段的效果可以是
# 任何效果名称、“r,g,b”颜色或内置功能效果：
#   "off"             - LED 熄灭
#   "on"              - LED 为白色
#   "gate_status"     - 指示登机口可用性
#   "filament_color"  - 指示灯丝颜色
#   "slicer_color"    - 显示切片器为每个门定义的颜色
#
[gcode_macro _MMU_SET_LED]
description: Called when print state changes

# -------------------------- 内部请勿触摸 -------------------------
# 这些变量由 Happy Hare 根据 LED 硬件设置自动设置
# 在启动时或通过宏。使用“MMU_LED”修改运行时的行为
variable_led_strip: "neopixel:mmu_leds"
variable_exit_first_led_index: -1
variable_exit_reverse_order: 0
variable_entry_first_led_index: -1
variable_entry_reverse_order: 0
variable_status_led_index: -1
variable_current_exit_effect: "none"
variable_current_entry_effect: "none"
variable_current_status_effect: "none"

gcode:
    {% set vars = printer['gcode_macro _MMU_LED_VARS'] %}
    {% if vars['led_enable'] %}
        {% set exit_effect = params.EXIT_EFFECT|default("")|string %}
        {% set entry_effect = params.ENTRY_EFFECT|default("")|string %}
        {% set status_effect = params.STATUS_EFFECT|default("")|string %}
        {% set gate = params.GATE|default(-1)|int %}
        {% set duration = params.DURATION|default(-1)|int %}
        {% set fadetime = params.FADETIME|default(1)|int %}

        # 获取有用的打印机变量
        {% set leds_name = led_strip.split(':')[1] %}
        {% set gate_status = printer['mmu']['gate_status'] %}
        {% set gate_color = printer['mmu']['gate_color'] %}
        {% set gate_color_rgb = printer['mmu']['gate_color_rgb'] %}
        {% set slicer_color_rgb = printer['mmu']['slicer_color_rgb'] %}
        {% set filament_pos = printer['mmu']['filament_pos'] %}

        {% if duration >= 0 %}
            UPDATE_DELAYED_GCODE ID=_MMU_RESET_LED DURATION={duration}
        {% endif %}

        {% if exit_effect == "default" %}
            {% set exit_effect = vars['default_exit_effect'] %}
        {% endif %}
        {% if entry_effect == "default" %}
            {% set entry_effect = vars['default_entry_effect'] %}
        {% endif %}
        {% if status_effect == "default" %}
            {% set status_effect = vars['default_status_effect'] %}
        {% endif %}

        {% if not exit_effect == "" %}
            SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_exit_effect VALUE='"{exit_effect}"'
        {% endif %}
        {% if not entry_effect == "" %}
            SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_entry_effect VALUE='"{entry_effect}"'
        {% endif %}
        {% if not status_effect == "" %}
            SET_GCODE_VARIABLE MACRO=_MMU_SET_LED VARIABLE=current_status_effect VALUE='"{status_effect}"'
        {% endif %}

        # 这仅具有禁用未配置段的效果
        {% if exit_first_led_index < 1 %}
            {% set exit_effect = "" %}
        {% endif %}
        {% if entry_first_led_index < 1 %}
            {% set entry_effect = "" %}
        {% endif %}
        {% if status_led_index < 1 %}
            {% set status_effect = "" %}
        {% endif %}

        # 退出效果...
        {% set segment = "exit" %}
        {% set first = exit_first_led_index %}
        {% if exit_reverse_order == 1 %}
            {% set index = first - gate %}
            {% set count = -1 %}
            {% set last = first - gate_status|length + 1 %}
        {% else %}
            {% set index = first + gate %}
            {% set count = 1 %}
            {% set last = first + gate_status|length - 1 %}
        {% endif %}

        {% if exit_effect == "off" %}
            {% if gate >= 0 %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})" FADETIME={fadetime}
                SET_LED LED={leds_name} INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})" FADETIME={fadetime}
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif exit_effect == "gate_status" %} # 灯丝可用性
            {% if gate >= 0 %}
                {% if gate_status[gate] == -1 %}
                    SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={fadetime} REPLACE=1
                {% elif gate_status[gate] > 0 %}
                    SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={fadetime} REPLACE=1
                {% else %}
                    STOP_LED_EFFECTS LEDS="{led_strip} ({index})" FADETIME={fadetime}
                {% endif %}
            {% else %}
                {% for status in gate_status %}
                    {% set current_index = first + loop.index0 * count %}
                    {% if status == -1 %}
                        SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{current_index} FADETIME={fadetime} REPLACE=1
                    {% elif status > 0 %}
                        SET_LED_EFFECT EFFECT=mmu_green_{segment}_{current_index} FADETIME={fadetime} REPLACE=1
                    {% else %}
                        STOP_LED_EFFECTS LEDS="{led_strip} ({current_index})" FADETIME={fadetime}
                        SET_LED LED={leds_name} INDEX={current_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                    {% endif %}
                {% endfor %}
            {% endif %}

        {% elif exit_effect == "filament_color" %} # 灯丝颜色
            {% if gate >= 0 %}
                {% set rgb = gate_color_rgb[gate] %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})"
                {% for rgb in gate_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    {% set current_gate = loop.index0 %}
                    {% if gate_status[current_gate] != 0 %}
                        {% if gate_color[current_gate] == "" %}
                            {% set rgb = vars['white_light'] %}
                        {% elif rgb == (0,0,0) %}
                            {% set rgb = vars['black_light'] %}
                        {% endif %}
                    {% else %}
                        {% set rgb = vars['empty_light'] %}
                    {% endif %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif exit_effect == "slicer_color" %} # 切片器颜色
            {% if gate >= 0 %}
                {% set rgb = slicer_color_rgb[gate] %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})"
                {% for rgb in slicer_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif "," in exit_effect %} # 不是效果，只是简单的RGB颜色
            {% set rgb = exit_effect.split(",") %}
            {% if gate >= 0 %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})"
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif exit_effect != "" %} # 按名称简单效果
            {% if gate >= 0 %}
                SET_LED_EFFECT EFFECT={exit_effect}_{index} FADETIME={fadetime} REPLACE=1
            {% else %}
                SET_LED_EFFECT EFFECT={exit_effect} FADETIME={fadetime} REPLACE=1
            {% endif %}
        {% endif %}

        # 进入效果...
        {% set segment = "entry" %}
        {% set first = entry_first_led_index %}
        {% if entry_reverse_order == 1 %}
            {% set index = first - gate %}
            {% set count = -1 %}
            {% set last = first - gate_status|length + 1 %}
        {% else %}
            {% set index = first + gate %}
            {% set count = 1 %}
            {% set last = first + gate_status|length - 1 %}
        {% endif %}

        {% if entry_effect == "off" %}
            {% if gate >= 0 %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})" FADETIME={fadetime}
                SET_LED LED={leds_name} INDEX={index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})" FADETIME={fadetime}
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif entry_effect == "gate_status" %} # 灯丝可用性
            {% if gate >= 0 %}
                {% if gate_status[gate] == -1 %}
                    SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{index} FADETIME={fadetime} REPLACE=1
                {% elif gate_status[gate] > 0 %}
                    SET_LED_EFFECT EFFECT=mmu_green_{segment}_{index} FADETIME={fadetime} REPLACE=1
                {% else %}
                    STOP_LED_EFFECTS LEDS="{led_strip} ({index})" FADETIME={fadetime}
                {% endif %}
            {% else %}
                {% for status in gate_status %}
                    {% set current_index = first + loop.index0 * count %}
                    {% if status == -1 %}
                        SET_LED_EFFECT EFFECT=mmu_orange_{segment}_{current_index} FADETIME={fadetime} REPLACE=1
                    {% elif status > 0 %}
                        SET_LED_EFFECT EFFECT=mmu_green_{segment}_{current_index} FADETIME={fadetime} REPLACE=1
                    {% else %}
                        STOP_LED_EFFECTS LEDS="{led_strip} ({current_index})" FADETIME={fadetime}
                        SET_LED LED={leds_name} INDEX={current_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
                    {% endif %}
                {% endfor %}
            {% endif %}

        {% elif entry_effect == "filament_color" %} # 灯丝颜色
            {% if gate >= 0 %}
                {% set rgb = gate_color_rgb[gate] %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})"
                {% for rgb in gate_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    {% set current_gate = loop.index0 %}
                    {% if gate_status[current_gate] != 0 %}
                        {% if gate_color[current_gate] == "" %}
                            {% set rgb = vars['white_light'] %}
                        {% elif rgb == (0,0,0) %}
                            {% set rgb = vars['black_light'] %}
                        {% endif %}
                    {% else %}
                        {% set rgb = vars['empty_light'] %}
                    {% endif %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif entry_effect == "slicer_color" %} # 切片器颜色
            {% if gate >= 0 %}
                {% set rgb = slicer_color_rgb[gate] %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})"
                {% for rgb in slicer_color_rgb %}
                    {% set current_index = first + loop.index0 * count %}
                    SET_LED LED={leds_name} INDEX={current_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif "," in entry_effect %} # 不是效果，只是简单的RGB颜色
            {% set rgb = entry_effect.split(",") %}
            {% if gate >= 0 %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({index})"
                SET_LED LED={leds_name} INDEX={index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                STOP_LED_EFFECTS LEDS="{led_strip} ({first}-{last})"
                {% for i in range(first, last + count, count) %}
                    SET_LED LED={leds_name} INDEX={i} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
                {% endfor %}
            {% endif %}

        {% elif entry_effect != "" %} # 按名称简单效果
            {% if gate >= 0 %}
                SET_LED_EFFECT EFFECT={entry_effect}_{index} FADETIME={fadetime} REPLACE=1
            {% else %}
                SET_LED_EFFECT EFFECT={entry_effect} FADETIME={fadetime} REPLACE=1
            {% endif %}
        {% endif %}

        # 状态效果...
        {% if status_effect == "off" %}
            STOP_LED_EFFECTS LEDS="{led_strip} ({status_led_index})" FADETIME={fadetime}
            SET_LED LED={leds_name} INDEX={status_led_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1

        {% elif status_effect in ["filament_color", "on"] %} # 灯丝颜色或开启
            {% set gate = printer['mmu']['gate'] %}
            STOP_LED_EFFECTS LEDS="{led_strip} ({status_led_index})"
            {% if gate >= 0 and filament_pos > 0 %}
                {% if status_effect != "on" and gate_color[gate] != "" %}
                    {% set rgb = gate_color_rgb[gate] %}
                {% else %}
                    {% set rgb = vars['white_light'] %}
                {% endif %}
                SET_LED LED={leds_name} INDEX={status_led_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED={leds_name} INDEX={status_led_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif status_effect == "slicer_color" %} # 切片器颜色
            {% set gate = printer['mmu']['gate'] %}
            STOP_LED_EFFECTS LEDS="{led_strip} ({status_led_index})"
            {% if gate >= 0 and filament_pos > 0 %}
                {% set rgb = slicer_color_rgb[gate] %}
                SET_LED LED={leds_name} INDEX={status_led_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1
            {% else %}
                SET_LED LED={leds_name} INDEX={status_led_index} RED=0 GREEN=0 BLUE=0 TRANSMIT=1
            {% endif %}

        {% elif "," in status_effect %} # 没有效果，只是简单的RGB颜色
            {% set rgb = status_effect.split(",") %}
            STOP_LED_EFFECTS LEDS="{led_strip} ({status_led_index})"
            SET_LED LED={leds_name} INDEX={status_led_index} RED={rgb[0]} GREEN={rgb[1]} BLUE={rgb[2]} TRANSMIT=1

        {% elif status_effect != "" %} # 按名称简单效果
            SET_LED_EFFECT EFFECT={status_effect} FADETIME={fadetime} REPLACE=1
        {% endif %}
    {% endif %}


###########################################################################
# LED 控制助手
#
[delayed_gcode _MMU_RESET_LED]
gcode:
    _MMU_SET_LED EXIT_EFFECT=default ENTRY_EFFECT=default STATUS_EFFECT=default


###########################################################################
# 定义上面控制宏中使用的 LED 效果
# （需要在 mmu_hardware.cfg 中进行设置，否则这将无效并且可以
#  保持原样，以便在您想要添加 LED 时做好准备）
#
# [mmu_led_effect] 是一个简单的包装器，可以根据您的 MMU 设置轻松定义
#
# 例如如果您在mmu_hardware.cfg中为4门MMU设置了以下配置
#   [mmu_leds]
#   exit_range:   1-4
#   status_index: 5
#
# 例如您定义“mmu_flash”列表这个
#   [mmu_led_effect mmu_flash]
#
# 这将毫不费力地对每个分段元素产生效果
# 容易出错的重复：
#  “mmu_flash_exit”位于条带的“退出”部分（LED 1、2、3）
#  状态 LED 上显示“mmu_flash_status”（LED 5）
#  门 0 的“mmu_flash_exit_1”打开（led 1）
#  门 1 的“mmu_flash_exit_2”打开（led 2）
#  门 2 的“mmu_flash_exit_3”打开（led 3）
#  门 3 的“mmu_flash_exit_4”打开（led 4）
#
# 然后你可以使用如下命令设置效果：
#  SET_LED_EFFECT EFFECT=mmu_flash_exit     # 对所有出口 LED 应用效果
#  SET_LED_EFFECT EFFECT=mmu_flash_exit_2   # 对 #1 门应用 LED 效果条目
#
# 或者使用以下命令设置简单的 RBGW 颜色：
# SET_LED LED=mmu_led 索引=2 红色=50 绿色=50 蓝色=50 白色=0 传输=1
#
# 请注意，门从 0 开始，但 LED 索引和效果命名从 1 开始，
# 所以记住索引=门+1
#
[mmu_led_effect mmu_breathing_red]
layers:       breathing 4 0 top (1,0,0)

[mmu_led_effect mmu_white_slow]
layers:       breathing 1.0 0 top (0.8,0.8,0.8)

[mmu_led_effect mmu_white_fast]
layers:       breathing 0.6 0 top (0.2,0.2,0.2)

[mmu_led_effect mmu_strobe]
layers:       strobe    1 1.5 add (1,1,1)
              breathing 2 0   difference (0.95,0,0)
              static    0 0   top (1,0,0)

[mmu_led_effect mmu_green]
frame_rate:   12
layers:       static 0 0 top (0,0.5,0)

[mmu_led_effect mmu_orange]
frame_rate:   12
layers:       static 0 0 top (0.5,0.2,0)

[mmu_led_effect mmu_curtain]
define_on:    exit
layers:       comet -1.5 1.0 add (0.4,0.4,0.4),(0,0,1)
              comet  1.5 1.0 top (0.4,0.4,0.4),(1,0,0)

[mmu_led_effect mmu_sparkle]
define_on:    exit
layers:       twinkle 8 0.15 top (0.3,0.3,0.3), (0.4,0,0.25)

