# 单独包含伺服硬件定义以允许自动升级

###########################################################################
# 可选 MMU 细丝切割器支持
#
# https://github.com/kevinakasam/ERCF_Filament_Cutter
# 
# 这是支持 MMU 灯丝切割的补充宏
# ERCF 设计。
#
# 配置：
# 1. 将其添加到您的 Printer.cfg 中：
#
#   [include mmu/addons/mmu_erec_cutter.cfg]
#
# 2. 在 mmu_macro_vars.cfg 中，更改此行：
#
#   variable_user_post_unload_extension ：“MMU_CUT”
#
# 3. 调整下面的伺服配置和宏“变量”
#

# MMU 刀具配置 -----------------------------------------------
#   (addons/mmu_erec_cutter.cfg)
#
[mmu_servo cut_servo]
pin: mmu:MMU_CUT_SERVO			# ERCF Easy Board 上的额外 Pin 图
maximum_servo_angle: 180	    # 将其设置为 60 以实现 60° 伺服
minimum_pulse_width: 0.00050
maximum_pulse_width: 0.00250
initial_angle:180

###########################################################################
# 执行切割步骤的宏。设计用于包含
# _MMU_POST_UNLOAD step
#
[gcode_macro _MMU_CUT]
description: Cut off the filament tip at the MMU after the unload sequence is complete
gcode:
    {% set parking = params.PARKING|default(1)|int %}
    {% set parking_distance = printer.mmu.gate_parking_distance|float %}
    {% set endstop_to_encoder = printer.mmu.gate_endstop_to_encoder|float %}
    {% set homing_endstop = printer.mmu.gate_homing_endstop %}
    {% set cut_feed_length  = printer.mmu.cut_feed_length|float + 2 %}
    {% set cut_length = printer.mmu.cut_length|float %}
    {% set closed_angle  = printer.mmu.servo_closed_angle|int %}
    {% set open_angle = printer.mmu.servo_open_angle|int %}
    {% set cut_angle = printer.mmu.servo_cut_angle|int %}
    {% set cut_attempts = printer.mmu.cut_attempts|int %}
    {% set cut_duration = printer.mmu.servo_cut_duration|float %}
    {% set cut_dwell = printer.mmu.servo_cut_dwell|float %}
    

    SET_SERVO SERVO=cut_servo ANGLE={open_angle} DURATION={cut_duration}
    {% if parking == 1 %}
        _MMU_STEP_MOVE MOVE={parking_distance}
    {% endif %}
    {% if homing_endstop == "mmu_gate" %}
        _MMU_STEP_MOVE MOVE={endstop_to_encoder}
    {% endif %}
    _MMU_STEP_MOVE MOVE={cut_feed_length * 2}
    _MMU_STEP_MOVE MOVE=-{cut_feed_length}
    {% for cut in range(cut_attempts) %}
        _MMU_STEP_MOVE MOVE={cut_length}
        SET_SERVO SERVO=cut_servo ANGLE={cut_angle} DURATION={cut_duration}
        G4 P{cut_dwell}
        SET_SERVO SERVO=cut_servo ANGLE={open_angle} DURATION={cut_duration}
        G4 P{cut_dwell}
    {% endfor %}
    _MMU_STEP_MOVE MOVE={cut_length + 3}
    _MMU_STEP_MOVE MOVE=-{cut_length + 10}
    SET_SERVO SERVO=cut_servo ANGLE={closed_angle} DURATION={cut_duration}
    
    _MMU_STEP_SET_FILAMENT STATE=2	# FILAMENT_POS_START_BOWDEN
    _MMU_STEP_UNLOAD_GATE		# 重复门停车移动
    _MMU_M400				# 等待两个移动队列

[gcode_macro _MMU_UNLOAD_SEQUENCE_CUT]
description: Called when MMU is asked to unload filament
gcode:
    {% set filament_pos = params.FILAMENT_POS|float %}
    {% set length = params.LENGTH|float %}
    {% set extruder_only = params.EXTRUDER_ONLY|int %}
    {% set park_pos = params.PARK_POS|float %}

    {% if extruder_only %}
        {% if filament_pos >= 7 %}                      # FILAMENT_POS_PAST_EXTRUDER
            _MMU_STEP_UNLOAD_TOOLHEAD EXTRUDER_ONLY=1 PARK_POS={park_pos}
        {% else %}
            {action_raise_error("Can't unload extruder - already unloaded!")}
        {% endif %}

    {% elif filament_pos == 0 %}
        {action_raise_error("Can't unload - already unloaded!")}

    {% else %}
        {% if filament_pos >= 7 %}                      # FILAMENT_POS_PAST_EXTRUDER
            # 退出挤出机，快速卸载 Bowden，然后慢速卸载编码器
            _MMU_STEP_UNLOAD_TOOLHEAD PARK_POS={park_pos}
        {% endif %}

        {% if filament_pos >= 4 %}                      # FILAMENT_POS_END_BOWDEN
            # 快速卸载 Bowden，然后慢速卸载编码器
            _MMU_STEP_UNLOAD_BOWDEN FULL=1
            _MMU_STEP_UNLOAD_GATE_CUT 

        {% elif filament_pos >= 2 %}                    # FILAMENT_POS_START_BOWDEN
            # 必须缓慢卸载，因为我们不知道我们在鲍登的确切位置
            _MMU_STEP_UNLOAD_GATE_CUT FULL=1
        {% endif %}
        MMU_CUT PARKING=0 

    {% endif %}