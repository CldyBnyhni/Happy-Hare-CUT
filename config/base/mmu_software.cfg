########################################################################################################################
# 快乐兔子支持宏
# Miscellaneous setup and supporting macros
#
# 该文件是只读的
#

###########################################################################
# 必要的 KLIPPER 覆盖
# 这些补充设置本质上禁用 klipper 的内置功能
# 挤压限制，并且在使用 MMU 时是必要的
#
[extruder]
max_extrude_only_distance: 200
max_extrude_cross_section: 50

# Mainsail 中的对话框提示
# 需要主帆版本 >= v2.9.0
#
[respond]


###########################################################################
# 方便的打印启动宏，用户可以直接从他们的设备中调用
# 切片器的自定义“起始 g 代码”或从现有起始宏调用
#
# 要从切片器调用（推荐），请将这些行添加到您的自定义开始
# g 代码（调用常规打印启动宏之前和之后）。
# 建议先将灯丝吹扫部分分开
# 序列直到加载初始工具之后。
#
#   切片器：自定义启动 g 代码
#   +----------------------------------------------------------+
#   | ; 初始化MMU并保存gcode文件中的信息                         |
#   | MMU_START_SETUP INITIAL_TOOL={initial_tool}              |
#   |                 REFERENCED_TOOLS=!referenced_tools!      |
#   |                 TOOL_COLORS=!colors!                     |
#   |                 TOOL_TEMPS=!temperatures!                |
#   |                 TOOL_MATERIALS=!materials!               |
#   |                 PURGE_VOLUMES=!purge_volumes!            |
#   |                                                          |
#   | ; 检查 MMU 是否设置为切片器定义的打印                       |
#   | MMU_START_CHECK                                          |
#   |                                                          |
#   | ; 用于打印启动的床调平、加热逻辑等                          |
#   | ; （挤出机中不需要长丝）                                   |
#   | PRINT_START；在这里调用您现有的宏..                        |
#   |                                                          |
#   | ; 将切片器定义的初始工具加载到 MMU 中                       |
#   | MMU_START_LOAD_INITIAL_TOOL                              |
#   |                                                          |
#   | ; 开始打印之前的最终清除逻辑                                |
#   | ..可以选择调用您清除逻辑启动宏..                            |
#   +----------------------------------------------------------+
#
# 注意：建议将这 4 或 5 行添加到您的
# 切片器是将它们保留为单独的 gcode 宏，以便打印到
# 发生错误时暂停。如果你把所有东西都捆绑到一个单一的
# 打印开始宏然后第一次暂停的机会将在最后
# 其中，可能会长期运行，宏！
#
# 或者，您可以将参数传递给现有的打印开始
# 宏，然后在该宏中插入这些调用（但不推荐）
# 因为上面的暂停警告）
#
#    MMU_START_SETUP {rawparams}
#    MMU_START_CHECK
#    MMU_START_LOAD_INITIAL_TOOL
#
[gcode_macro MMU_START_SETUP]
description: Called when starting print to setup MMU
gcode:
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}
    {% set ttg_map = printer.mmu.ttg_map %}
    {% set referenced_tools = (params.REFERENCED_TOOLS|default("!referenced_tools!")|string).split(",")
        if (params.REFERENCED_TOOLS and params.REFERENCED_TOOLS != "")
        else [] %}
    {% set tool_colors = (params.TOOL_COLORS|default("")|string).split(",")
        if (params.TOOL_COLORS and params.TOOL_COLORS != "!colors!" and params.TOOL_COLORS != "")
        else ['000000'] * ttg_map|length %}
    {% set tool_temps = (params.TOOL_TEMPS|default("")|string).split(",")
        if (params.TOOL_TEMPS and params.TOOL_TEMPS != "!temperatures!" and params.TOOL_TEMPS != "")
        else ['0'] * ttg_map|length %}
    {% set tool_materials = (params.TOOL_MATERIALS|default("")|string).split(",")
        if (params.TOOL_MATERIALS and params.TOOL_MATERIALS != "!materials!" and params.TOOL_MATERIALS != "")
        else ['unknown'] * ttg_map|length %}
    {% set purge_volumes = (params.PURGE_VOLUMES|default("")|string)
        if (params.PURGE_VOLUMES and params.PURGE_VOLUMES != "!purge_volumes!" and params.PURGE_VOLUMES != "")
        else "" %}

    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set home_mmu = vars.home_mmu|lower == 'true' %}

    {% set filament_loaded = printer.mmu.filament_pos == 10 %}
    {% set using_bypass = printer.mmu.tool == -2 %}
    {% set num_colors = referenced_tools|length %}

    {% if printer.mmu.enabled %}
        # 从 Octoprint 打印时的注意事项（可选，但如果从虚拟 SD 卡打印则无害）
        {% if vars.octoprint_compat %}
            _MMU_PRINT_START
        {% endif %}

        # 通常这将是 G28，以确保在暂停时归位
        {% if not vars.user_pre_initialize_extension == "" %} 
            {vars.user_pre_initialize_extension}
        {% endif %}

        # 确定打印的颜色数量和所使用的工具
        {% if referenced_tools == ['!referenced_tools!'] %}
            RESPOND MSG="Happy Hare gcode pre-processor is probably disabled or not setup correctly"
            {% set referenced_tools = [] %}
            {% set num_colors = -1 %}
        {% elif referenced_tools == [] %}
            {% set num_colors = 1 %}
        {% endif %}

        # 健全性检查解析的信息
        {% if tool_colors|length != ttg_map|length or tool_temps|length != ttg_map|length or tool_materials|length != ttg_map|length %}
            RESPOND MSG="WARNING: Looks like slicer is setup with {tool_materials|length} extruders but your MMU has {ttg_map|length} gates! These must match"
        {% endif %}

        # 设置切片器工具图
        MMU_SLICER_TOOL_MAP RESET=1 INITIAL_TOOL={initial_tool} PURGE_VOLUMES={purge_volumes}
        {% for t in range(tool_colors|length) %}
            MMU_SLICER_TOOL_MAP TOOL={t} TEMP={tool_temps[t]} MATERIAL={tool_materials[t]} COLOR={tool_colors[t]} {"USED=0" if t|string not in referenced_tools and t != initial_tool else ""} QUIET=1
        {% endfor %}

        {% set custom_msg = [] %}
        {% set m = [] %}
        {% for tool in referenced_tools %}
            {% set _ = m.append("T" + tool|string + " (Gate" + ttg_map[tool|int]|string + ")") %}
        {% endfor %}
        {% set line = "Initial Tool: T%s" % initial_tool %}
        {% set _ = m.append(line) %}
        {% set _ = custom_msg.append("Print requires tools: %s" % ", ".join(m)) %}
        {% set _ = custom_msg.append("Manually ensure that T" + initial_tool|string + " is loaded and all other tools available before resuming print") %}
        MMU_SLICER_TOOL_MAP

        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=show_abort VALUE={True} # Show abort option during startup
        {% if using_bypass and filament_loaded %}
            RESPOND MSG="MMU Bypass selected and loaded"
            {% if num_colors > 1 %}
                SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
                MMU_PAUSE MSG="Bypass selected for multi-color print"
            {% endif %}
        {% else %}
            # 在启动过程中出现额外的 mmu 错误时，抢先设置详细对话框消息
            SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE="{custom_msg}"
            {% if home_mmu %}
                {% if not filament_loaded %} 
                    MMU_HOME
                {% else %}
                    RESPOND MSG="Skipping homing MMU because filament is already loaded"
                {% endif %}
            {% endif %}
         {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_setup_run VALUE={True}


###########################################################################
# 用于检查所需门是否有灯丝的辅助宏。这个是分离出来的
# 来自主设置宏以允许首先暂停先前的错误
#
[gcode_macro MMU_START_CHECK]
description: Helper macro. Can be called to perform pre-start checks on MMU based on slicer requirements
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set check_gates = vars.check_gates|lower == 'true' %}
    {% set using_bypass = printer.mmu.tool == -2 %}

    {% if printer.mmu.enabled %}
        {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
        {% set initial_tool = slicer_tool_map.initial_tool %}
        {% set tools = slicer_tool_map.referenced_tools %}
        {% if not using_bypass %}
            # 未来：可以在此处进行额外的检查，例如灯丝材料类型/颜色检查
            # 确保 MMU 上加载的内容符合切片器的期望
            {% if check_gates and tools|length > 0 %}
                # 如果是多色打印，请预先检查门选项。如果工具丢失将会暂停
                RESPOND MSG="Checking all required gates have filament loaded..."
                {% if not printer.mmu.is_homed %}
                    MMU_HOME
                {% endif %}
                MMU_CHECK_GATE TOOLS={tools|join(",")}
            {% endif %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_check_run VALUE={True}


###########################################################################
# 用于加载初始工具的辅助宏。这是从主程序中分离出来的
# 设置宏以允许首先暂停上一个错误
#
[gcode_macro MMU_START_LOAD_INITIAL_TOOL]
description: Helper to load initial tool if not paused
gcode:
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set load_initial_tool = vars.load_initial_tool|lower == 'true' %}
    {% set using_bypass = printer.mmu.tool == -2 %}
    {% set filament_loaded = printer.mmu.filament_pos == 10 %}

    {% if printer.mmu.enabled %}
        {% set slicer_tool_map = printer.mmu.slicer_tool_map %}
        {% set initial_tool = slicer_tool_map.initial_tool %}
        {% set tools = slicer_tool_map.referenced_tools %}
        {% if not using_bypass or tools|length >= 1 %}
            {% if load_initial_tool and (initial_tool is not none and initial_tool >= 0) %}
                RESPOND MSG="Loading initial tool T{initial_tool}..."
                MMU_CHANGE_TOOL STANDALONE=1 TOOL={initial_tool}
            {% endif %}
        {% elif not filament_loaded %}
            MMU_PAUSE MSG="Load bypass or initial tool before resuming print"
        {% else %}
            RESPOND MSG="Using bypass"
        {% endif %}
    {% endif %}

     # 重要提示：清除先发制人的错误消息并从暂停对话框中删除中止选项
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=custom_msg VALUE='""'
    SET_GCODE_VARIABLE MACRO=_MMU_ERROR_DIALOG VARIABLE=show_abort VALUE={False}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_load_initial_tool_run VALUE={True}


###########################################################################
# 方便的打印结束宏，用户可以直接从他们的设备中调用
# 切片器的自定义“结束 G 代码”或从现有结束宏调用
# 
# 要从切片器调用，请将其添加到自定义结束 G 代码（可能作为一行
# 就在调用常规打印结束宏之后）或直接从
# 没有现有的打印结束宏：
#
#   切片器：自定义结束 g 代码
#   +----------------------------------------------------------+
#   | ; 完成 MMU 并可选择弹出灯丝           |
#   | MMU_END                                                  |
#   |                                                          |
#   | ; 您现有的打印结束宏                        |
#   | PRINT_END                                                |
#   +----------------------------------------------------------+
#
[gcode_macro MMU_END]
description: Called when ending print to finalize MMU
gcode:
    {% set eject = params.EJECT|default(0) %}
    {% set vars = printer['gcode_macro _MMU_SOFTWARE_VARS'] %}
    {% set eject_tool = vars.eject_tool|lower == 'true' %}
    {% set octoprint_compat = vars.octoprint_compat|lower == 'true' %}
    {% set reset_ttg = vars.reset_ttg|lower == 'true' %}
    {% set dump_stats = vars.dump_stats|lower == 'true' %}

    {% if printer.mmu.enabled %}
        {% if eject or eject_tool %}
            MMU_EJECT
        {% endif %}

        {% if reset_ttg %}
            MMU_TTG_MAP RESET=1 QUIET=1
        {% endif %}

        {% if dump_stats %}
            MMU_STATS
        {% endif %}

        # 从 Octoprint 打印时的注意事项（可选，但如果从虚拟 SD 卡打印则无害）
        {% if octoprint_compat %}
            _MMU_PRINT_END
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_end_run VALUE={True}


###########################################################################
# 帮助用户完成冷拉的宏
#
# 假设鲍登管已从工具头和挤出机上移除
# 装载有约300mm的灯丝。使用必须有权访问
# 当要求时用力拉动灯丝
#
# Params:
#  MATERIAL=nylon|pla|abs|petg	启动温度默认值
#  HOT_TEMP			初始高温
#  COLD_TEMP			温度也冷却以帮助释放灯丝
#  MIN_EXTRUDE_TEMP		挤出机保持喷嘴加压的温度
#  PULL_TEMP			执行冷拉的温度
#  PULL_SPEED			挤出机移动速度（毫米/秒）有助于手动拉动
#  CLEAN_LENGTH			挤出到主挤出机/喷​​嘴的长丝量
#  EXTRUDE_SPEED		执行挤出操作的速度（以毫米/秒为单位）
#
[gcode_macro MMU_COLD_PULL]
description: Guide you through the process of cleaning your extruder with a cold pull
gcode:
    {% set material = params.MATERIAL|default("pla")|string|upper %}
    {% set materials = {
        'NYLON': {'hot_temp': 260, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
        'PLA':   {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 160},
        'ABS':   {'hot_temp': 255, 'cold_temp': 50, 'pull_temp': 120, 'min_extrude_temp': 190},
        'PETG':  {'hot_temp': 250, 'cold_temp': 45, 'pull_temp': 100, 'min_extrude_temp': 180}
    } %}
    {% if material not in materials %}
        {action_raise_error("Unknown material. Valid types are: Nylon, ABS, PLA, PTEG")}
    {% endif %}

    # 允许单独的温度覆盖
    {% set hot_temp = params.HOT_TEMP|default(materials.get(material).hot_temp)|int %}
    {% set cold_temp = params.COLD_TEMP|default(materials.get(material).cold_temp)|int %}
    {% set pull_temp = params.PULL_TEMP|default(materials.get(material).pull_temp)|int %}
    {% set min_extrude_temp = params.MIN_EXTRUDE_TEMP|default(materials.get(material).min_extrude_temp)|int %}

    {% set pull_speed = params.PULL_SPEED|default(10)|int %}
    {% set clean_length = params.CLEAN_LENGTH|default(25)|int %}
    {% set extrude_speed = params.EXTRUDE_SPEED|default(1.5)|float %}

    {% set ns = namespace(stuff_points=[], cool_points=[]) %}

    {% for temp in range(hot_temp + 1, cold_temp - 1, -1) %}
        {% if temp % 10 == 0 %}
            {% if temp > min_extrude_temp %}
                {% set ns.stuff_points = ns.stuff_points + [temp] %}
            {% elif temp < min_extrude_temp %}
                {% set ns.cool_points = ns.cool_points + [temp] %}
            {% endif %}
        {% endif %}
    {% endfor %}

    RESPOND MSG='{"Cold Pull with pull_temp=%d\u00B0C, hot_temp=%d\u00B0C, min_extrude_temp=%d\u00B0C, cold_temp=%d\u00B0C" % (pull_temp, hot_temp, min_extrude_temp, cold_temp)}'

    RESPOND MSG='{"Heating extruder to %d\u00B0C" % hot_temp}'
    SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={hot_temp}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={hot_temp - 2} MAXIMUM={hot_temp + 2}

    # 确保喷嘴内径完全充满
    RESPOND MSG="Cleaning nozzle tip with {clean_length}mm of filament"
    _MMU_STEP_MOVE MOTOR="extruder" MOVE={clean_length} SPEED={extrude_speed}

    # 开始冷却坡道
    RESPOND MSG="Allowing extruder to cool..."
    SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={cold_temp}
    M106 S255			# 100% 零件风扇冷却更快

    # 虽然细丝仍然可以挤出，但保持喷嘴完全充满
    {% for temp in ns.stuff_points %}
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
        RESPOND MSG='{"Stuffing nozzle at %d\u00B0C" % temp}'
        _MMU_STEP_MOVE MOTOR="extruder" MOVE=1 SPEED={extrude_speed}
    {% endfor %}

    # 提供一些有关冷却过程的反馈
    RESPOND MSG='{"Waiting for extruder to completely cool to %d\u00B0C..." % cold_temp}'
    {% for temp in ns.cool_points %}
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={temp}
        RESPOND MSG='{"Nozzle at %d\u00B0C" % temp}'
    {% endfor %}
    TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM={cold_temp}

    # 重新加热
    M107			# 部分风扇关闭
    RESPOND MSG='{"Re-warming extruder to %d\u00B0C" % pull_temp}'
    SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={pull_temp}

    # 手动冷拉
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp - 10}
    RESPOND MSG="Get ready to pull..."
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={pull_temp}
    RESPOND MSG=">>>>> PULL NOW <<<<<"

    # 以中等速度缩回 150 毫米（用户也应该拉动）
    _MMU_STEP_MOVE MOTOR="extruder" MOVE=-150 SPEED={pull_speed}
    RESPOND MSG="Cold pull is successful if you can see the shape of the nozzle at the filament end"

    # 加热器完全关闭
    SET_HEATER_TEMPERATURE HEATER="extruder"


###########################################################################
# 当 MMU 暂停时，用于显示支持 UI 的对话框的帮助程序宏
#
[gcode_macro _MMU_ERROR_DIALOG]
description: Helper to display pause dialog
variable_custom_msg: '' # 要附加到对话框中的其他自定义消息行列表
variable_show_abort: False
gcode:
    {% set message = params.MSG|string %}
    {% set reason = params.REASON|string %}
    RESPOND TYPE=command MSG="action:prompt_begin Happy Hare Error Notice"
    RESPOND TYPE=command MSG='{"action:prompt_text %s" % message}'
    RESPOND TYPE=command MSG='{"action:prompt_text Reason: %s" % reason}'
    {% if not custom_msg == "" %}
        {% for line in custom_msg %}
            RESPOND TYPE=command MSG='{"action:prompt_text %s" % line}' 
        {% endfor %}
    {% else %}
        RESPOND TYPE=command MSG="action:prompt_text After fixing, call RESUME to continue printing (MMU_UNLOCK to restore temperature)"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    {% if show_abort %}
        RESPOND TYPE=command MSG="action:prompt_button ABORT|CANCEL_PRINT|error"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_button UNLOCK|MMU_UNLOCK|secondary"
    RESPOND TYPE=command MSG="action:prompt_button RESUME|RESUME|warning"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"
    {% set custom_msg = "" %}


###########################################################################
# Klippain 的助手可重置开始/结束步骤“跑步”跟踪器
#
[gcode_macro _MMU_RUN_MARKERS]
variable_mmu_start_setup_run: False
variable_mmu_start_check_run: False
variable_mmu_start_load_initial_tool_run: False
variable_mmu_end_run: False
gcode:
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_setup_run VALUE=False
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_check_run VALUE=False
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_start_load_initial_tool_run VALUE=False
    SET_GCODE_VARIABLE MACRO=_MMU_RUN_MARKERS VARIABLE=mmu_end_run VALUE=False


###########################################################################
# 简化的命令子集，仅用于宏可见性
# Mainsail/Fluidd UI（直到自定义 HH 面板完成！）
# __ 是一个技巧，因为它不会由 UI 显示，但允许
# 与 klipper 模块定义的真实命令类似的名称
#
[gcode_macro MMU__EJECT]
description: 退料
gcode: MMU_EJECT

[gcode_macro MMU__HOME]
description: 归零
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    {% set force_unload = params.FORCE_UNLOAD|default(0)|int %}
    MMU_HOME TOOL={tool} FORCE_UNLOAD={force_unload}

[gcode_macro MMU__STATUS]
description: 详细状态
gcode: MMU_STATUS

[gcode_macro MMU__MOTORS_OFF]
description: 关闭兔子电机
gcode: MMU_MOTORS_OFF

[gcode_macro MMU__SERVO]
description: 兔子舵机
gcode:
    {% if printer.mmu.servo|lower == 'up' %}
     MMU_SERVO POS=Down
    {% else %}
     MMU_SERVO POS=UP
    {% endif %}

[gcode_macro MMU__SELECT_TOOL]
description: 选择通道(屏蔽映射通道)
gcode:
    {% set tool = params.TOOL|default(0)|int %}
    MMU_SELECT TOOL={tool}

[gcode_macro MMU__SELECT_BYPASS]
description: 卸载并选择旁路选择器位置
gcode: MMU_SELECT_BYPASS

[gcode_macro MMU__LOAD_BYPASS]
description: 加载当前通道
gcode: MMU_LOAD

[gcode_macro MMU__RECOVER]
description: 恢复灯丝位置并选择性地重置 ERCF 状态
gcode: MMU_RECOVER

[gcode_macro MMU__PRELOAD]
description: 灯丝加载的助手.将灯丝送入浇口,ERCF将捕获它并正确定位在指定的浇口上
gcode:
    {% set gate = params.GATE|default(0)|int %}
    MMU_PRELOAD GATE={gate}

[gcode_macro MMU__CHECK_GATE]
description: 检查闸门并标记可用性
gcode:
    {% set gate = params.GATE|default(-1)|int %}
    {% set tool = params.GATE|default(-1)|int %}
    {% set gates = params.GATE|default('!')|string %}
    {% set tools = params.GATE|default('!')|string %}
    MMU_CHECK_GATE GATE={gate} TOOL={tool} GATES={gates} TOOLS={tools}

[gcode_macro MMU_CALIBRATE_BOWDEN_LENGTH]
description: 校准多色到挤出机的距离
gcode:
    {% set BL = printer["gcode_macro _MMU_BOWDEN_LENGTH"] %}
    {% set LENGTH = BL.bowden_length|int + BL.feedback_length|int %}
    {% set BOWDEN = params.BOWDEN|default(LENGTH)|int %}
    MMU_CALIBRATE_BOWDEN BOWDEN_LENGTH={BOWDEN}

[gcode_macro MMU_GATE]
description: 门状态
gcode:
    {% set GATE = params.GATE|default(0)|int %}
    {% set MATERIAL = params.MATERIAL|default(ABS)%}
    {% set COLOR = params.COLOR|default(blue)%}
    {% set AVAILABLE = params.AVAILABLE|default(1)|int %}
    {% set SPEED = params.SPEED|default(100)|int %}
    {% set SPOOLID = params.SPOOLID|default()|int %}
    MMU_GATE_MAP GATE={GATE} MATERIAL={MATERIAL} COLOR={COLOR} AVAILABLE={AVAILABLE} SPEED={SPEED} SPOOLID={SPOOLID}

###########################################################################
# 以前常用命令的别名（为了向后兼容）...
#
[gcode_macro MMU_CHANGE_TOOL_STANDALONE]
description: Convenience macro for inclusion in print_start for initial tool load
gcode:
    MMU_CHANGE_TOOL {rawparams} STANDALONE=1

[gcode_macro MMU_CHECK_GATES]
description: Alias for updated macro name of MMU_CHECK_GATE
gcode:
    MMU_CHECK_GATE ALL=1

[gcode_macro MMU_REMAP_TTG]
description: Alias for updated macro name of MMU_TTG_MAP
gcode:
    MMU_TTG_MAP {rawparams}

[gcode_macro MMU_FORM_TIP]
description: Alias for updated macro name of MMU_TEST_FORM_TIP
gcode:
    MMU_TEST_FORM_TIP {rawparams}

