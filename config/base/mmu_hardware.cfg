########################################################################################################################
# Happy Hare MMU 硬件配置文件，包含 unknown MCU 板的配置
#
# 根据您的设置编辑此文件
#
# 关于常见外部mcus设置的注意事项可以在这里找到：
#  https://github.com/moggieuk/Happy-Hare/blob/main/doc/mcu_notes.md
# 
# 关于“触摸”终点挡块的注意事项：Happy Hare 使用单步进器或
# 同步步进器。 “touch”选项利用了stallguard，因此需要适当的“diag_pin”和stallguard
# 在 TMC 驱动程序部分设置的参数。如果您暴露了 diag_pin，则定义它是无害的，因为
# 它们仅在明确需要和配置时才会使用。
#
# 每个步进器的触摸选项提供了以下好处/可能性（实验性）：
# - 挤出机步进器允许自动检测喷嘴！
# - 选择器步进器允许自动检测卡在门中的灯丝并随后恢复
# - 齿轮步进器允许自动检测挤出机入口
#
# 这些听起来很棒吧？是的，但有一些警告：
# -外部 EASY-BRD 和 ERB MCU 在检测失速保护方面表现不佳，并且经常导致“欠压”
#  错误”。通常可以调整选择器触摸 (TMC2209)，特别是如果您设置了“stealthchop_threshold”
#  设置为大于归航速度且小于移动速度的值。 IE。步进器在 Stealthchop 模式下运行
#  归航。 [klipper 专家会知道，它会自动将芯片模式切换到 Stealthchop，然后再返回
#  Stallguard2 支持，但是在归位移动结束时自动切换回展开周期似乎会引起麻烦
#  错误条件并设置“shealthchip_threshold”适当地避免了这种情况。比你想要的更多
#  就知道我确定！
# -我在使用 EASY-BRD 和 ERB MCU 的齿轮步进器上的触摸（失速防护）方面运气不佳，你真的
#  想要 spreadcycle 的额外扭矩，因此调整 'stealthchop_threshold' 并不是真正的选择
# -启用挤出机步进器是可行的，但您可能必须更改主 MCU 上的跳线才能暴露
#  挤出机步进器所连接的驱动器的 DIAG 引脚。
#
# 总之，使用 MMU 进行“触摸”归位是一个高级选项，需要耐心和仔细调整。一切
# 适用于常规终点挡块，并且对于某些归位点（如挤出机入口）有解决方法选项
# 没有任何终点站。我对创意设置非常感兴趣。在 Discord 上联系我 (moggieuk#6538)
#
# 请参阅“mmu.cfg”了解串行定义和引脚别名
#
# 具有寻零功能的挤出机（非常先进） -----------------------------------------------------------------------------
# 安装 Happy Hare 后，甚至挤出机也可以回家。您会发现可以添加常用的“endstop”参数
# 到你的“[挤出机]”部分。毫无用处，你在喷嘴上安装了一些聪明的称重传感器，它只会真正使
# 配置stallguard风格“触摸”归位的意义。为此，请将与此类似的行添加到现有的
# Printer.cfg 中的“[挤出机]”定义。
#
# [挤出机]
# endstop_pin：tmc2209_extruder：virtual_endstop
#
# 另外请务必将适当的stallguard配置添加到TMC部分，例如
#
#    [tmc2209 extruder]
#    diag_pin: E_DIAG		# 设置为连接到挤出机 TMC DIAG 引脚的 MCU 引脚
#    driver_SGTHRS: 100		# 255 是最敏感的值，0 是最不敏感的
#
# Happy Hare 会处理剩下的事情并自动添加一个“mmu_ext_touch”终点站
#


# 灯丝驱动齿轮步进机  -----------------------------------------------------------------------------------------
# 请注意，如果定义了工具头传感器或门传感器，将自动添加“工具头”和“mmu_gear”终点挡块
#
# 默认值是使用 ERCF BOM NEMA14 电机进行测试的。请根据您所使用的电机调整这些值
# 示例：对于 NEMA17 电机，您通常会使用更高的电流
#
[tmc5160 stepper_mmu_gear]
cs_pin: mmu:MMU_GEAR_UART                                            # 选择器轴SPI_EN通信需要
spi_bus: spi1a                                                       # 所有TMC5160驱动程序都连接到spi1a 
run_current: 0.800                                                   # 运行电流
hold_current: 0.2                                                    # 空闲电流 如果不使用“触摸”或移动，建议较小（TMCstallguard）
interpolate: True                                                    # 是否开启256微步插值
sense_resistor: 0.051                                                # 感测电阻
#
# 如果您有 TMC 并且希望能够通过齿轮步进器使用灯丝“触摸”归位，请取消注释下面的两行
#diag_pin: ^mmu:MMU_GEAR_DIAG		                                 # 设置为连接到齿轮步进器 TMC DIAG 引脚的 MCU 引脚
#driver_SGTHRS: 60			                                         # 255 是最敏感的值，0 是最不敏感的

[stepper_mmu_gear]
step_pin: mmu:MMU_GEAR_STEP                                          # 电机脉冲引脚设置
dir_pin: mmu:MMU_GEAR_DIR                                           # 轴电机方向引脚设置，可以通过添或删除引脚前面的!来改变电机的运转方向
enable_pin: !mmu:MMU_GEAR_ENABLE                                     # 轴电机使能引脚设置
rotation_distance:  22.56382	                                   	  # Bondtech 5 毫米驱动齿轮。被 mmu_vars.cfg 中的“mmu gearrotation_distance”覆盖
gear_ratio: 50:17			                                          # 例如ERCF 80:20，Tradrack 50:17
microsteps: 16 				                                          # 推荐 16. 仅当同步时出现“步进压缩”问题时才增加
full_steps_per_rotation: 200		                                  # 1.8 度为 200，0.9 度为 400
#
# 取消注释下面两行，以启用带有齿轮电机的灯丝“触摸”归位选项
#extra_endstop_pins: tmc2209_stepper_mmu_gear:virtual_endstop
#extra_endstop_names: mmu_gear_touch


# 选择器步进器  ----------------------------------------------------------------------------------------------------
# 如果您想设置选择器以进行“触摸”归位或物理终点停止，请参阅文档
#
[tmc5160 stepper_mmu_selector]
cs_pin: mmu:MMU_SEL_UART                                             # 选择器轴SPI_EN通信需要
spi_bus: spi1a                                                       # 所有TMC5160驱动程序都连接到spi1a 
run_current: 0.600                                                   # 运行电流
hold_current: 0.2                                                    # 空闲电流 如果不使用“触摸”或移动，建议较小（TMCstallguard）
interpolate: True                                                    # 是否开启256微步插值
sense_resistor: 0.051                                                # 感测电阻
#
# 如果您有 TMC 并且想要使用选择器“触摸”移动，请取消注释下面的两行
#diag_pin: ^mmu:MMU_SEL_DIAG 		                                 # 设置为连接到选择器步进器的 TMC DIAG 引脚的 MCU 引脚
#driver_SGTHRS: 75			                                         # 255 是最敏感的值，0 是最不敏感的

[stepper_mmu_selector]
step_pin: mmu:MMU_SEL_STEP                                           # 电机脉冲引脚设置
dir_pin: mmu:MMU_SEL_DIR                                            # 轴电机方向引脚设置，可以通过添或删除引脚前面的!来改变电机的运转方向
enable_pin: !mmu:MMU_SEL_ENABLE                                      # 轴电机使能引脚设置
rotation_distance: 40                                                # 主动带轮周长mm（2GT-20T带轮40，2GT-16T带轮32）
microsteps: 16 				                                         # 不需要高保真度
full_steps_per_rotation: 200		                                 # 1.8 度为 200，0.9 度为 400
endstop_pin: ^mmu:MMU_SEL_ENDSTOP	                                 # 选择微动开关
endstop_name: mmu_sel_home
#
# 取消注释下面两行以提供选择器“触摸”移动的选项
#extra_endstop_pins: tmc2209_stepper_mmu_selector:virtual_endstop
#extra_endstop_names: mmu_sel_touch


# 选择伺服系统 -------------------------------------------------------------------------------------------------------
# 基本伺服 PWM 设置。如果这些值改变，那么为不同位置定义的角度也会改变
#
[mmu_servo mmu_servo]
pin: mmu:MMU_SERVO
maximum_servo_angle: 180
minimum_pulse_width: 0.00085
maximum_pulse_width: 0.00215


# 用于 FILAMETRIX 长丝切割机的可选龙门伺服系统 ----------------------------------------------------------------
# 基本伺服 PWM 设置。如果这些值改变，那么为不同位置定义的角度也会改变
#
# 仅当您有龙门伺服时才取消注释
#
#[mmu_servo mmu_gantry_servo]
#pin: 
#maximum_servo_angle:180
#minimum_pulse_width: 0.00085
#maximum_pulse_width: 0.00215
#initial_angle: 180


# 编码器 -------------------------------------------------------------------------------------------------------------
# 编码器测量距离，监控跳动和堵塞，并不断计算％流量
# 请注意，encoder_resolution 设置纯粹是默认设置。通过校准设定
# 并存储在 mmu_vars.cfg 中
#
[mmu_encoder mmu_encoder]
encoder_pin: ^mmu:MMU_ENCODER		                                   # EASY-BRD: ^PA6, Flytech ERB: ^gpio22
encoder_resolution: 1.0			                                       # 这只是一个起始值。被 mmm_vars.cfg 中的 `mmu_encoder_resolution` 覆盖
desired_headroom: 5.0			                                       # MMU 尝试维持的堵塞/跳动余量（最接近触发跳动的点）
average_samples: 4			                                           # 最后一次测量的“阻尼”效果（值越高意味着 clog_length 减少越慢）
flowrate_samples: 20			                                       # 编码器上有多少挤出机“移动”来测量流量计算


# 灯丝传感器 -----------------------------------------------------------------------------------------------------
# 定义灯丝路径中可选传感器的引脚。除门前传感器外的所有传感器都将自动设置为
# 两个终点挡块（用于归位）和用于可见性目的的传感器。
#
# 'pre_gate_switch_pin_X' .. “mmu_pre_gate_X”传​​感器检测 MMU 入口处的灯丝。 X=门数(0..N)
# 'gate_switch_pin'       .. “mmu_gate'”传感器检测 MMU 栅极处的灯丝
# 'toolhead_switch_pin'   .. “toolhead”传感器在挤出机进入后检测灯丝
# 'extruder_switch_pin'   .. “extruder”传感器在挤出机进入之前检测到灯丝
#
# 同步电机反馈通常有一个张力开关（更重要）或同时有张力和压缩
# 'sync_feedback_tension_pin'     .. 当灯丝处于张力下时，开关销被激活
# 'sync_feedback_compression_pin' .. 灯丝受压时激活开关引脚
#
# 只需为要启用的任何传感器定义引脚，如果未设置引脚（或别名为空），它将被忽略。
# 你也可以直接注释掉你不使用的内容
#
[mmu_sensors]
#pre_gate_switch_pin_0: ^mmu:MMU_PRE_GATE_0
#pre_gate_switch_pin_1: ^mmu:MMU_PRE_GATE_1
#pre_gate_switch_pin_2: ^mmu:MMU_PRE_GATE_2
#pre_gate_switch_pin_3: ^mmu:MMU_PRE_GATE_3
#pre_gate_switch_pin_4: ^mmu:MMU_PRE_GATE_4
#pre_gate_switch_pin_5: ^mmu:MMU_PRE_GATE_5
#pre_gate_switch_pin_6: ^mmu:MMU_PRE_GATE_6
#pre_gate_switch_pin_7: ^mmu:MMU_PRE_GATE_7
#pre_gate_switch_pin_8: ^mmu:MMU_PRE_GATE_8
#pre_gate_switch_pin_9: ^mmu:MMU_PRE_GATE_9
#pre_gate_switch_pin_10: ^mmu:MMU_PRE_GATE_10
#pre_gate_switch_pin_11: ^mmu:MMU_PRE_GATE_11

#gate_switch_pin: ^mmu:MMU_GATE_SENSOR
#extruder_switch_pin:
#toolhead_switch_pin:

#sync_feedback_tension_pin: 
#sync_feedback_compression_pin: 


# MMU 可选 NEOPIXEL LED 支持 ------------------------------------------------------------------------------------
# 定义 LED 连接、类型和长度
#
# （如果没有LED请注释掉此部分）
[neopixel mmu_leds]
pin: mmu:MMU_NEOPIXEL
chain_count: {mmu_num_leds}			# 门数 x1 或 x2 + 1（如果你想要状态）
color_order: GRBW		# 根据您特定的 neopixel 规格进行设置


# MMU LED 效果段 ----------------------------------------------------------------------------------------------
# 为您的 MMU 定义 neopixel LED。 chain_count 必须足够大以满足您所需的范围：
#   exit   .. 这组 LED 灯对应每个门，通常安装在门的出口处
#   entry  .. 这组 LED（每个门一个）可以安装在灯丝进入 MMU/缓冲器的入口点
#   status .. 该单个 LED 代表当前所选灯丝的状态
#
# 请注意，所有集合都是可选的。例如，您可以选择简单地仅设置“退出”。拥有的优势
# 例如，入口和出口 LED 都是这样，“入口”可以显示门状态，而“出口”则显示颜色
# 
# 该效果需要安装 Julian Schill 出色的 LED 效果模块：
#   https://github.com/julianschill/klipper-led_effect
# LED 在链中从 1..N 开始索引。因此，要在 4 门 MMU 上设置“退出”LED 和单个“状态”LED：
#   exit_range:   1-4
#   status_index: 5
# 在此示例中，未配置“条目”集。
#
# 请注意范围顺序很重要并且取决于您的接线。因此 1-4 和 4-1 都代表相同的 LED 范围
# 但分别映射到递增或递减门
#
# 请注意，Happy Hare 提供了一个方便的包装器 [mmu_led_effect]，它不仅对每个
# [mmu_leds] 指定段以及用于原子控制的每个单独的 LED。有关示例，请参阅 mmu_leds.cfg
#
# (如果上面的“led_strip”不存在，则此部分是无害的并被忽略 -LED 支持将被禁用)
[mmu_leds]
num_gates: {mmu_num_gates}
led_strip: neopixel:mmu_leds
exit_range: 1-{mmu_num_gates}
#entry_range: {mmu_num_leds}-{mmu_num_leds}
status_index: {mmu_num_leds}
frame_rate: 24

